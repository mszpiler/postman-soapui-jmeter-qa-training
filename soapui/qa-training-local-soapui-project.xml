<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="54faa8bd-3547-4f1b-858b-6f2018a2ec61" activeEnvironment="Default" name="qa-training-local" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface xsi:type="con:RestService" id="47a87fb8-7f3a-49f6-99a9-f0fc551f809d" wadlVersion="http://wadl.dev.java.net/2009/02" name="Norad API" type="rest" basePath="/norad" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:description>Norad API documentation</con:description>
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>http://localhost:8600</con:endpoint>
    </con:endpoints>
    <con:resource name="/accounts" path="/accounts" id="1cb9c1b9-c32e-4c3a-873b-378d231a4fdf">
      <con:settings/>
      <con:parameters/>
      <con:method name="registerUsingPOST" id="57fc49ef-8919-4a0f-9b8a-ffb239a2bb3c" method="POST">
        <con:description>Registers new user.
Register new user</con:description>
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>201</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>403</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>409</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:acc="http://localhost/norad/accounts">acc:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:acc="http://localhost/norad/accounts">acc:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="8f6bbd6d-91e9-46ce-a12b-3d09b5d05596" mediaType="application/json">
          <con:settings/>
          <con:endpoint>http://localhost:8600</con:endpoint>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/accounts/{uuid}" path="/accounts/{uuid}" id="b95018fa-0323-4287-83ee-a7d1bc939c7c">
      <con:settings/>
      <con:parameters/>
      <con:method name="getUserUsingGET" id="4a2b905f-1c5e-4413-9229-bdb53ab0324f" method="GET">
        <con:description>Gets user by uuid
Get user by uuid</con:description>
        <con:settings/>
        <con:parameters>
          <con:parameter required="true">
            <con:name>uuid</con:name>
            <con:style>TEMPLATE</con:style>
            <con:description>uuid</con:description>
          </con:parameter>
        </con:parameters>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>403</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element xmlns:acc="http://localhost/norad/accounts/">acc:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="c7916ebf-65a5-4583-98be-1d68a678eea7" mediaType="application/json">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://localhost:8600</con:endpoint>
          <con:request/>
          <con:originalUri>http://localhost/norad/accounts/</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/animals" path="/animals" id="8ab5dd4d-7223-4fd1-9a71-e55a8fdbff39">
      <con:settings/>
      <con:parameters/>
      <con:method name="createUsingPOST" id="fabbbb92-ab71-4b73-9208-2263666b6523" method="POST">
        <con:description>Creates new animal.
Creates animal</con:description>
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>201</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>403</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>409</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element xmlns:anim="http://localhost/norad/animals">anim:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:anim="http://localhost/norad/animals">anim:Response</con:element>
        </con:representation>
        <con:request name="Request 1" id="59f38633-0d2e-4eb2-ad2b-0db15ca69269" mediaType="application/json">
          <con:settings/>
          <con:endpoint>http://localhost:8600</con:endpoint>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/animals/{animalUUID}/images/{imageUUID}" path="/animals/{animalUUID}/images/{imageUUID}" id="bbc13787-e934-4aa7-8597-ceb13545a6d3">
      <con:settings/>
      <con:parameters/>
      <con:method name="downloadImageUsingGET" id="dec7dae3-2fe7-4806-98a2-5064b9aaf607" method="GET">
        <con:description>downloadImage</con:description>
        <con:settings/>
        <con:parameters>
          <con:parameter>
            <con:name>animalUUID</con:name>
            <con:style>TEMPLATE</con:style>
            <con:description>Animal UUID</con:description>
          </con:parameter>
          <con:parameter>
            <con:name>imageUUID</con:name>
            <con:style>TEMPLATE</con:style>
            <con:description>Image UUID</con:description>
          </con:parameter>
        </con:parameters>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>403</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="ee0aad84-6a99-4235-8788-fc172593e6ed" mediaType="application/json">
          <con:settings/>
          <con:endpoint>http://localhost:8600</con:endpoint>
          <con:parameters/>
        </con:request>
      </con:method>
      <con:method name="uploadImageUsingPOST" id="18a3502c-a14a-4aaf-932f-3614bc48756a" method="POST">
        <con:description>uploadImage</con:description>
        <con:settings/>
        <con:parameters>
          <con:parameter>
            <con:name>animalUUID</con:name>
            <con:style>TEMPLATE</con:style>
            <con:description>Animal UUID</con:description>
          </con:parameter>
          <con:parameter>
            <con:name>file</con:name>
            <con:style>QUERY</con:style>
            <con:description>Binary content of the animal picture</con:description>
          </con:parameter>
          <con:parameter>
            <con:name>imageUUID</con:name>
            <con:style>TEMPLATE</con:style>
            <con:description>Image UUID</con:description>
          </con:parameter>
        </con:parameters>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>201</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>403</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>multipart/form-data</con:mediaType>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="abfa88f7-d861-42ad-a2bd-759c0b8d0e12" mediaType="multipart/form-data">
          <con:settings/>
          <con:endpoint>http://localhost:8600</con:endpoint>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/animals/{uuid}" path="/animals/{uuid}" id="040823a4-43ca-4e33-9731-66d30f635c37">
      <con:settings/>
      <con:parameters/>
      <con:method name="getAnimalUsingGET" id="222f85c2-b727-4b1c-9402-8a97fa52a6cd" method="GET">
        <con:description>Gets animal by uuid
Get animal by uuid</con:description>
        <con:settings/>
        <con:parameters>
          <con:parameter>
            <con:name>uuid</con:name>
            <con:style>TEMPLATE</con:style>
            <con:description>animal UUID</con:description>
          </con:parameter>
        </con:parameters>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>403</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="7a4a5a89-c4bf-4895-bfb8-6123ebfa9dc0" mediaType="application/json">
          <con:settings/>
          <con:endpoint>http://localhost:8600</con:endpoint>
          <con:parameters/>
        </con:request>
      </con:method>
      <con:method name="updateStatusUsingPUT" id="44273c87-ed4e-4cc9-b362-cc855d07e1ca" method="PUT">
        <con:description>Gets animal by uuid
Get animal by uuid</con:description>
        <con:settings/>
        <con:parameters>
          <con:parameter>
            <con:name>uuid</con:name>
            <con:style>TEMPLATE</con:style>
            <con:description>animal UUID</con:description>
          </con:parameter>
        </con:parameters>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>201</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>403</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="a0c94efd-990a-4722-a19f-1ce32646b881" mediaType="application/json">
          <con:settings/>
          <con:endpoint>http://localhost:8600</con:endpoint>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="/dictionaries/races" path="/dictionaries/races" id="fbc25db0-6161-43ac-835e-f3d6fd336822">
      <con:settings/>
      <con:parameters/>
      <con:method name="getRacesUsingGET" id="a1cecabd-7750-4c76-8780-43fdada2176c" method="GET">
        <con:description>Gets all races
Get all races</con:description>
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>403</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>*/*</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>Response</con:element>
        </con:representation>
        <con:request name="Request 1" id="c0fa3bd1-76a7-4aa6-96da-b59602723c95" mediaType="application/json">
          <con:settings/>
          <con:endpoint>http://localhost:8600</con:endpoint>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:testSuite id="686ce353-39fe-4f4f-85c2-5e0a0cc0b162" name="Norad Test Suite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="c15e7083-9b47-468c-a530-5bb517d8b6f6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Exercise 4 – Get all races" searchProperties="true">
      <con:settings/>
      <con:testStep type="restrequest" name="Get all races" id="0f15917f-c56d-4670-a0d5-a9d30ebf98f3">
        <con:settings/>
        <con:config service="Norad API" resourcePath="/norad/dictionaries/races" methodName="getRacesUsingGET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Get all races" id="c0fa3bd1-76a7-4aa6-96da-b59602723c95" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://localhost:8600</con:endpoint>
            <con:request/>
            <con:originalUri>http://localhost/norad/dictionaries/races</con:originalUri>
            <con:assertion type="Valid HTTP Status Codes" id="eb86acde-c227-436e-8fb4-c76b08025e00" name="Valid HTTP Status Codes">
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            <con:assertion type="JsonPath Count" id="3886b0ac-e46a-4d9c-a4e8-4aeb35e78421" name="JsonPath Count">
              <con:configuration>
                <path>$</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="b6bdecbd-38a4-4372-89d8-ad178d883cfa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Exercise 5 – Register new user" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Generate unique email" id="48433527-19f0-4855-9835-1393d8b0e3cc">
        <con:settings/>
        <con:config>
          <script>import org.apache.commons.lang.RandomStringUtils

String charset = (('A'..'Z') + ('0'..'9')).join()
Integer length = 9
String randomString = RandomStringUtils.random(length, charset.toCharArray())
String value = "mszpiler+" + randomString + "@norad.com"

testRunner.testCase.setPropertyValue("email", value)

log.info value</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Register user" id="536648c1-c6b6-4161-90c7-626cc1e33e7b">
        <con:settings/>
        <con:config service="Norad API" resourcePath="/norad/accounts" methodName="registerUsingPOST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Register user" id="8f6bbd6d-91e9-46ce-a12b-3d09b5d05596" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://localhost:8600</con:endpoint>
            <con:request>{
  "email": "${#TestCase#email}",
  "password": "password"
}</con:request>
            <con:originalUri>http://localhost/norad/accounts</con:originalUri>
            <con:assertion type="JsonPath Match" id="ba7ef56d-9ef1-4d29-b8ec-6503b4545a1d" name="JsonPath Match">
              <con:configuration>
                <path>$.email</path>
                <content>${#TestCase#email}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="a4d612e3-c196-4f0a-bf43-acb9fba75008" name="Database veryfication">
              <con:configuration>
                <scriptText>import groovy.sql.Sql

import java.sql.Driver

def driver = Class.forName('org.postgresql.Driver').newInstance() as Driver

def props = new Properties()
props.setProperty("user", "pkko")
props.setProperty("password", "pkko")

def conn = driver.connect("jdbc:postgresql://localhost:8200/pkko_db", props)
def sql = new Sql(conn)
def testCase = messageExchange.modelItem.testCase
def email = testCase.getPropertyValue("email")
log.info "Email=" + email
try {
    def row = sql.firstRow('select * from norad.users where email = :email', [email: email])
    assert row.email == email
} catch (Exception e) {
    log.info(e.getMessage())
    assert false
}
finally {
    sql.close()
    conn.close()
}</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Save user uuid in properties" id="d3903bc5-ef69-4080-9e2f-7578d36b4620">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper
def res = context.expand('${Register user#response}')
slurperresponse = new JsonSlurper().parseText(res)
log.info "userUUID="+slurperresponse.uuid
testRunner.testCase.testSuite.setPropertyValue("userUUID", slurperresponse.uuid)</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>email</con:name>
          <con:value>mszpiler+QWIPR6JUJ@norad.com</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="72cfe231-7ba0-4f77-af16-5b37d2815067" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Exercise 6 - Add new animal to new user" searchProperties="true">
      <con:settings/>
      <con:testStep type="calltestcase" name="Run TestCase Register new user" id="9df9798a-388c-4272-9a2f-0200c6c6e427">
        <con:settings/>
        <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:targetTestCase>b6bdecbd-38a4-4372-89d8-ad178d883cfa</con:targetTestCase>
          <con:properties>
            <con:property>
              <con:name>email</con:name>
            </con:property>
          </con:properties>
          <con:returnProperties/>
          <con:runMode>PARALLELL</con:runMode>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Generate random animal name" id="f3629324-aa61-4ea2-9e82-942b8985603e">
        <con:settings/>
        <con:config>
          <script>import org.apache.commons.lang.RandomStringUtils

String charset = (('A'..'Z') + ('0'..'9')).join()
Integer length = 9
String randomString = RandomStringUtils.random(length, charset.toCharArray())
String value = "mszpiler+animal+" + randomString
testRunner.testCase.setPropertyValue("animalName", value)
log.info value</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Get races" id="a8084431-ab3c-4715-a428-328645045449">
        <con:settings/>
        <con:config service="Norad API" resourcePath="/norad/dictionaries/races" methodName="getRacesUsingGET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Ger races" id="c0fa3bd1-76a7-4aa6-96da-b59602723c95" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://localhost:8600</con:endpoint>
            <con:request/>
            <con:originalUri>http://localhost/norad/dictionaries/races</con:originalUri>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Fetch random race" id="4bf12cac-96d0-4332-b153-ba9aed576725">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper
def res = context.expand('${Get races#response}')
slurperresponse = new JsonSlurper().parseText(res)
Random random = new Random()
def randomIndex = random.nextInt(10)
log.info "raceId="+slurperresponse[randomIndex].id
testRunner.testCase.setPropertyValue("raceId", ""+slurperresponse[randomIndex].id)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create new animal" id="0a1e67be-8de4-430a-a814-56482fc656f6">
        <con:settings/>
        <con:config service="Norad API" resourcePath="/norad/animals" methodName="createUsingPOST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create new animal" id="59f38633-0d2e-4eb2-ad2b-0db15ca69269" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://localhost:8600</con:endpoint>
            <con:request>{
	"name" : "${#TestCase#animalName}",
	"species" : "CAT",
	"raceId" : "${#TestCase#raceId}",
	"userUUID" : "${#TestSuite#userUUID}",
	"chipId" : "111",
	"images" : 
	[
		{
			"captureTimestamp": "2019-06-07T12:45:57",
			"originalFilename":"originalFilename1",
			"mimeType" : "images/jpg"		
		},
		{
			"captureTimestamp": "2019-06-07T12:45:57",
			"originalFilename":"originalFilename2",
			"mimeType" : "images/jpg"		
		},
		{
			"captureTimestamp": "2019-06-07T12:45:57",
			"originalFilename":"originalFilename3",
			"mimeType" : "images/jpg"		
		}		
	]
}</con:request>
            <con:originalUri>http://localhost/norad/animals</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="1f1b84fa-23a3-4fda-ae74-73765cd4b3a4" name="Assert A - expected race">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import groovy.json.JsonSlurper
import java.sql.Driver

def driver = Class.forName('org.postgresql.Driver').newInstance() as Driver

def props = new Properties()
props.setProperty("user", "pkko")
props.setProperty("password", "pkko")
def conn = driver.connect("jdbc:postgresql://localhost:8200/pkko_db", props)
def sql = new Sql(conn)

def testCase = messageExchange.modelItem.testCase
 
def raceId = testCase.getPropertyValue("raceId")

def res = context.expand('${Create new animal#response}')
slurperresponse = new JsonSlurper().parseText(res)
def animalUUID = UUID.fromString(slurperresponse.uuid)

log.info "animalUUID=" + animalUUID + " raceId="+raceId

try {
    def row = sql.firstRow('select * from norad.animals where uuid = :uuid', [uuid: animalUUID])
    log.info "row.race_id="+row.race_id
    assert row.race_id == raceId.toInteger()
} catch (Exception e) {
    log.info(e.getMessage())
    assert false
}
finally {
    sql.close()
    conn.close()
}</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="142c9528-c00a-4e2a-9b8d-7662b408e5dd" name="Assert B - expected user">
              <con:configuration>
                <scriptText>import groovy.json.JsonSlurper
import groovy.sql.Sql

import java.sql.Driver

def driver = Class.forName('org.postgresql.Driver').newInstance() as Driver

def props = new Properties()
props.setProperty("user", "pkko")
props.setProperty("password", "pkko")
def conn = driver.connect("jdbc:postgresql://localhost:8200/pkko_db", props)
def sql = new Sql(conn)

def testCase = messageExchange.modelItem.testCase

def tcUserUUID = testCase.testSuite.getPropertyValue("userUUID")
def userUUID = UUID.fromString(tcUserUUID)
log.info "userUUID="+userUUID

def res = context.expand('${Create new animal#response}')
slurperresponse = new JsonSlurper().parseText(res)

def animalUUID = UUID.fromString(slurperresponse.uuid)
log.info "animalUUID=" + animalUUID

try {
    def animalRow = sql.firstRow('select * from norad.animals where uuid = :uuid', [uuid: animalUUID])
    def userRow = sql.firstRow('select * from norad.users where uuid = :uuid', [uuid: userUUID])
    
    assert animalRow.user_id == userRow.id
    
} catch (Exception e) {
    log.info(e.getMessage())
    assert false
}
finally {
    sql.close()
    conn.close()
}</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="JsonPath Count" id="c0480e06-7f6c-42ae-99b5-8047019b7f3f" name="Assert C - expected image count">
              <con:configuration>
                <path>$.images</path>
                <content>3</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="85809f89-698c-42e3-adbd-298b6070e3e3" name="Assert D - uuids exist in images">
              <con:configuration>
                <scriptText>import groovy.json.JsonSlurper

def res = context.expand('${Create new animal#response}')
slurperresponse = new JsonSlurper().parseText(res)

for (i =0; i &lt; slurperresponse.images.size(); i++) {
	log.info slurperresponse.images[i].uuid
	assert slurperresponse.images[i].uuid != null
}</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Save animal UUID in properties" id="b9801576-4843-45ff-830c-c98b18bb7bbe">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper
def res = context.expand('${Create new animal#response}')
slurperresponse = new JsonSlurper().parseText(res)
log.info "animalUUID="+slurperresponse.uuid
testRunner.testCase.testSuite.setPropertyValue("animalUUID", ""+slurperresponse.uuid)</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>animalName</con:name>
          <con:value>mszpiler+animal+ZERF9Y8AI</con:value>
        </con:property>
        <con:property>
          <con:name>raceId</con:name>
          <con:value>6</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>userUUID</con:name>
        <con:value>b1e6d83d-54dc-4431-ab8b-2979ddd785d3</con:value>
      </con:property>
      <con:property>
        <con:name>animalUUID</con:name>
        <con:value>92b21dcb-8a37-47d1-8b96-9cf654b1b95d</con:value>
      </con:property>
    </con:properties>
  </con:testSuite>
  <con:properties/>
  <con:wssContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:sensitiveInformation/>
</con:soapui-project>
